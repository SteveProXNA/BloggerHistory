<span style="font-family:verdana;font-size:85%;">
In the previous <a href="http://steveproxna.blogspot.ie/2017/02/large-scale-cpp-projects.html">post</a>, we discussed Levelization to help reduce link-time dependencies in Large Scale C++ Projects.  Now let's build here to discuss Insulation techniques to help reduce compile-time dependencies.
<br /><br />
<b>Insulation</b><br />
Insulation is the process of avoiding or removing unnecessary compile-time coupling.
<br />
Insulation is a physical design issue whereas encapsulation refers to logical design.
<br /><br />
If a component can be modified without forcing clients to recompile is said to be <b>insulated</b>.
<br />
The following sections list techniques to minimize excessive compile-time dependencies:
<br /><br />
<u>Remove Private Inheritance</u><br />
Private Inheritance exposes some but not all functions in private base class to clients of derived class.
<table width="99%" border="1">
<tr>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;// base.h
&nbsp;#ifndef _INCLUDED_BASE
&nbsp;#define _INCLUDED_BASE





&nbsp;class Base
&nbsp;{
&nbsp;public:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Base()  {}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~Base() {}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void f1(int);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int f1() const;
&nbsp;};
&nbsp;#endif//_INCLUDED_BASE
</pre>
</td>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;// myclass.h
&nbsp;#ifndef _INCLUDED_MYCLASS
&nbsp;#define _INCLUDED_MYCLASS

&nbsp;#ifndef _INCLUDED_BASE
&nbsp;#include "base.h"
&nbsp;#endif//_INCLUDED_BASE

&nbsp;class MyClass : private Base
&nbsp;{
&nbsp;public:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyClass() {}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Base::f1; // access declaration



&nbsp;};
&nbsp;#endif//_INCLUDED_MYCLASS
</pre>
</td>
</tr>
</table>
<br />
However, the same logical interface can be achieved without exposing clients to details of the class.
<table width="99%" border="1">
<tr>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;// myclass.h
&nbsp;#ifndef _INCLUDED_MYCLASS
&nbsp;#define _INCLUDED_MYCLASS

&nbsp;class Base;

&nbsp;class MyClass
&nbsp;{
&nbsp;public:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyClass();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyClass(const MyClass& c);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~MyClass();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyClass& operator=(const MyClass& c);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void f1(int i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int f1() const;

&nbsp;private:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Base* p_base;
&nbsp;};
&nbsp;#endif//_INCLUDED_MYCLASS
</pre>
</td>
</tr>
</table>
<br />
Instead of privately deriving from Base, an implementation now holds an <a href="https://en.wikipedia.org/wiki/Opaque_pointer">opaque pointer</a> to Base;
<br />
New member functions of MyClass are defined (out-of-line) to forward calls to functions in Base.
<table width="99%" border="1">
<tr>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;// my_class.c
&nbsp;#include "myclass.h"
&nbsp;#include "base.h"

&nbsp;MyClass::MyClass()                 : p_base(new Base) {}
&nbsp;MyClass::MyClass(const MyClass& c) : p_base(new Base(*c.p_base))  {}

&nbsp;MyClass::~MyClass()
&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete p_base;
&nbsp;}

&nbsp;MyClass& MyClass::operator=(const MyClass& c)
&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this != &c)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete p_base;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_base = new Base(*c.p_base);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return *this;
&nbsp;}
&nbsp;void MyClass::f1(int i)
&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_base->f1(i);
&nbsp;}
&nbsp;int MyClass::f1() const
&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p_base->f1();
&nbsp;}
</pre>
</td>
</tr>
</table>
<br />
<u>Remove Embedded Data Members</u><br />
Insulate clients from an individual implementation class:
<ul>
<li>Convert all embedded instances of that implementation class to pointers (or references)</li>
<li>Manage those pointers explicitly in constructors, destructors and assignment operators</li>
</ul>
<br />
That is, convert <b>HasA</b> relationship to <b>HoldsA</b> to improve insulation.
<br />
Here, compare before insulating clients of class to after insulation.
<table width="99%" border="1">
<tr>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;// myclass_before.h
&nbsp;#ifndef _INCLUDED_MYCLASS_BEFORE
&nbsp;#define _INCLUDED_MYCLASS_BEFORE

&nbsp;#ifndef _INCLUDED_YOURCLASS
&nbsp;#include "yourclass.h"
&nbsp;#endif//_INCLUDED_YOURCLASS

&nbsp;class MyClass
&nbsp;{
&nbsp;public:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyClass();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~MyClass();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int getValue() const;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int getCount() const
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return count;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;private:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YourClass yours;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int count;
&nbsp;};
&nbsp;#endif//_INCLUDED_MYCLASS_BEFORE

&nbsp;// my_class_before.c
&nbsp;#include "myclass_before.h"


&nbsp;MyClass::MyClass()
&nbsp;{

&nbsp;}
&nbsp;MyClass::~MyClass()
&nbsp;{

&nbsp;}
&nbsp;int MyClass::getValue() const
&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return yours.getValue();
&nbsp;}
</pre>
</td>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;// myclass_after.h
&nbsp;#ifndef _INCLUDED_MYCLASS_AFTER
&nbsp;#define _INCLUDED_MYCLASS_AFTER


&nbsp;class YourClass;


&nbsp;class MyClass
&nbsp;{
&nbsp;public:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyClass();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~MyClass();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int getValue() const;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int getCount() const
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return count;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;private:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YourClass* p_yours;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int count;
&nbsp;};
&nbsp;#endif//_INCLUDED_MYCLASS_AFTER

&nbsp;// my_class_after.c
&nbsp;#include "myclass_after.h"
&nbsp;#include "yourclass.h"

&nbsp;MyClass::MyClass()
&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_yours = new YourClass;
&nbsp;}
&nbsp;MyClass::~MyClass()
&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete p_yours;
&nbsp;}
&nbsp;int MyClass::getValue() const
&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p_yours->getValue();
&nbsp;}
</pre>
</td>
</tr>
</table>
<br />
<u>Remove Private Member Functions</u><br />
Private member functions, although encapsulated, are part of the component's physical interface.
<br />
Instead of making functions private, make them static free (non-member) declared at file scope.
<br /><br />
Compare an original class, modified with only private static functions then with static free functions:
<table width="99%" border="1">
<tr>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;// myclass_before.h
&nbsp;#ifndef _INCLUDED_MYCLASS_BEFORE
&nbsp;#define _INCLUDED_MYCLASS_BEFORE

&nbsp;class MyClass
&nbsp;{
&nbsp;public:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int getValue() const;
 
&nbsp;private:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int value() const;
&nbsp;};
&nbsp;#endif//_INCLUDED_MYCLASS_BEFORE
</pre>
</td>
</tr>
</table>
<br />
Step One: convert each private member function to a private static member:
<table width="99%" border="1">
<tr>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;// myclass_after1.h
&nbsp;#ifndef _INCLUDED_MYCLASS_AFTER1
&nbsp;#define _INCLUDED_MYCLASS_AFTER1

&nbsp;class MyClass
&nbsp;{
&nbsp;public:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int getValue() const;

&nbsp;private:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static int value(const MyClass&);
&nbsp;};
&nbsp;#endif//_INCLUDED_MYCLASS_AFTER1

&nbsp;// myclass_after1.c
&nbsp;#include "myclass_after1.h"
&nbsp;int MyClass::getValue() const
&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return value(*this);
&nbsp;}
&nbsp;int MyClass::value(const MyClass& myclass)
&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;
&nbsp;}
</pre>
</td>
</tr>
</table>
<br />
Step Two: remove function declaration from header file and member notation from definition file:
<table width="99%" border="1">
<tr>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;// myclass_after2.h
&nbsp;#ifndef _INCLUDED_MYCLASS_AFTER2
&nbsp;#define _INCLUDED_MYCLASS_AFTER2

&nbsp;class MyClass
&nbsp;{
&nbsp;public:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int getValue() const;
&nbsp;};
&nbsp;#endif//_INCLUDED_MYCLASS_AFTER2

&nbsp;// myclass_after2.c
&nbsp;#include "myclass_after2.h"
&nbsp;int MyClass::getValue() const
&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return value(*this);
&nbsp;}
&nbsp;static int value(const MyClass& myClass)
&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;
&nbsp;}
</pre>
</td>
</tr>
</table>
<br />
<u>Remove Private Member Data</u><br />
Removing private static data is easy for inline member functions that do not require direct access:
<br />
Move static member data into a static variable defined at file scope in the component's <b>.c</b> file.
<br /><br />
Compare original class with private static member data and modified class with static file-scope data:
<table width="99%" border="1">
<tr>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;// myclass_before.h
&nbsp;#ifndef _INCLUDED_MYCLASS_BEFORE
&nbsp;#define _INCLUDED_MYCLASS_BEFORE

&nbsp;class MyClass
&nbsp;{
&nbsp;public:

&nbsp;private:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static int s_count;
&nbsp;};
&nbsp;#endif//_INCLUDED_MYCLASS_BEFORE

&nbsp;// my_class_before.c
&nbsp;#include "myclass_before.h"
&nbsp;int MyClass::s_count;
</pre>
</td>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;// myclass_after.h
&nbsp;#ifndef _INCLUDED_MYCLASS_AFTER
&nbsp;#define _INCLUDED_MYCLASS_AFTER

&nbsp;class MyClass
&nbsp;{
&nbsp;public:

&nbsp;private:

&nbsp;};
&nbsp;#endif//_INCLUDED_MYCLASS_AFTER

&nbsp;// my_class_after.c
&nbsp;#include "myclass_after.h"
&nbsp;static int s_count;
</pre>
</td>
</tr>
</table>
<br />
<u>Remove Compiler-Generated Functions</u><br />
The compiler <b>will</b> auto-generate the following functions if not found: constructor, copy constructor, assignment operator and/or destructor.  However, truly insulating class must define these explicitly.
<br /><br />
<u>Remove Include Directives</u><br />
Unnecessary #include directives can cause compile-time coupling where none would otherwise exist:
Move all unnecessary #include directives from a header file to <b>.c</b> file with forward class declarations.
<table width="99%" border="1">
<tr>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;// bank.h
&nbsp;class USD;    // class declaration instead of #include
&nbsp;class CAD;    // class declaration instead of #include
&nbsp;class NZD;    // class declaration instead of #include
 
&nbsp;class Bank
&nbsp;{
&nbsp;public:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;USD getUSD() const;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CAD getCAD() const;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NZD getNZD() const;
&nbsp;};
</pre>
</td>
</tr>
</table>
<br />
An alternative is to place <b>redundant</b> guards around each #include directive in every header file.
<br />
Although unpleasant, this may significantly reduce compile times in much larger C++ projects.
<table width="99%" border="1">
<tr>
<td valign="top">
<pre class="csharp" name="code">
&nbsp;// bank.h
&nbsp;#ifndef _INCLUDED_BANK
&nbsp;#define _INCLUDED_BANK
 
&nbsp;#ifndef _INCLUDED_USD
&nbsp;#include "usd.h"
&nbsp;#endif//_INCLUDED_USD
 
&nbsp;#ifndef _INCLUDED_CAD
&nbsp;#include "cad.h"
&nbsp;#endif//_INCLUDED_CAD
 
&nbsp;#ifndef _INCLUDED_NZD
&nbsp;#include "nzd.h"
&nbsp;#endif//_INCLUDED_NZD
 
&nbsp;class Bank {};
&nbsp;#endif//_INCLUDED_BANK
</pre>
</td>
</tr>
</table>
<br />
<u>Remove Enumerations</u><br />
Judicious use of enumerations, typedefs, + other constructs with internal linkage achieve good insulation:
Move enumerations and typedefs to <b>.c</b> file and replace them as private static const member of the class.
<br /><br />
<u>Summary</u><br />
Generally if a component is used widely throughout the system, its interface should be insulated.
<br />
However, insulated interfaces are not always practical, e.g. lightweight, reusuable components.
<br /><br />
Techniques<br />
<table width="99%" border="1">
<tr>
<td valign="top">&nbsp;Remove Private Inheritance</td>
<td valign="top">&nbsp;Convert <b>WasA</b> relationship to <b>HoldsA</b></td>
</tr>
<tr>
<td valign="top">&nbsp;Remove Embedded Data Members</td>
<td valign="top">&nbsp;Convert <b>HasA</b> relationship to <b>HoldsA</b></td>
</tr>
<tr>
<td valign="top">&nbsp;Remove Private Member Functions</td>
<td valign="top">&nbsp;Make them static at file scope and move into <b>.c</b> file</td>
</tr>
<tr>
<td valign="top">&nbsp;Remove Private Member Data</td>
<td valign="top">&nbsp;Extract a protocol and/or move static data to <b>.c</b> file</td>
</tr>
<tr>
<td valign="top">&nbsp;Remove Compiler Functions</td>
<td valign="top">&nbsp;Explicitly define these functions</td>
</tr>
<tr>
<td valign="top">&nbsp;Remove Include Directives</td>
<td valign="top">&nbsp;Remove include directives or replace with class declarations</td>
</tr>
<tr>
<td valign="top">&nbsp;Remove Enumerations</td>
<td valign="top">&nbsp;Relocate to <b>.c</b> file and replace as const static class member data</td>
</tr>
</table>
<br />
<u>Conclusion</u><br />
In conclusion, two important techniques can be used to mitigate cyclic dependencies in C++: Levelization can reduce link-time dependencies and Insulation can minimize compile-time dependencies.  Awesome <span style='font-family:Wingdings'>J</span><span><o:p></o:p></span>
</span>