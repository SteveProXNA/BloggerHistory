<span style="font-family:verdana;font-size:85%;">
In the previous <a href="http://steveproxna.blogspot.ie/2013/07/sega-machine-code-programming.html">post</a>, we checked out Sega Machine Code Programming and wrote <a href="http://en.wikipedia.org/wiki/Machine_code">machine code</a> on a modern-day computer using the Sega emulator <a href="http://www.emutopia.com/index.php/downloads-emulators/item/298-sega-sg-1000-sc-3000/239-meka">Meka</a> and a copy of the <a href="http://www.romnation.net/srv/roms/39583/segamastersystem/Sega-BASIC-Level-3-V1-SC-3000-b1.html">Sega BASIC Level 3</a> ROM. 
<br /><br />
As an example, we wrote the main loop of a simple "Shoot 'em up" game that simply moves a target sprite around the screen based on user input; preferably the joystick.
<br /><br />
However, a machine code program suffers from the disadvantage that it is tedious and cumbersome to manually translate each mnemonic to the corresponding opcode plus calculate all jump relative offsets.
<br /><br />
This can be resolved by using <a href="http://en.wikipedia.org/wiki/Assembly_language">assembly language</a> and an <a href="http://en.wikipedia.org/wiki/Assembler_(computing)#Assembler">assembler</a> to generate machine code routines.  Goal: write performance intensive code in assembly language directly and generate the machine code.
<br /><br />
<u>Setup</u>
<br />
Follow all instructions from previous <a href="http://steveproxna.blogspot.ie/2013/07/sega-machine-code-programming.html">post</a> to get setup with Sega programming before continuing.
<br /><br />
Launch Sega BASIC Level 3 ROM, that is, double click Sega BASIC Level 3 V1 (SC-3000) [b1].sc.
<br />
Activate keyboard to begin typing: Inputs menu, Sega Keyboard.  Next, open the Memory Editor:
<table width="100%">
<tr>
<td valign="top">
<ul>
<li>Tools menu</li>
<li>Memory Editor</li>
<li>Click RAM button</li>
<li>Type <b>F000</b></li>
</ul>
</td></tr>
</table>
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0t6xdB8S6e8Zf1OdqTIgujNTuQKoHbXz-5iQDZJggNtYW7N_7mVUWd6aI5KelwgtM4F6Tmt6KRQEhLyaJH6JC5ZocKbVLgEAQQ80mISmxbvMJwAK7CfbzO1IlVAEDstP4y3X-T7jm1gw/s1600/MemoryEditorI.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0t6xdB8S6e8Zf1OdqTIgujNTuQKoHbXz-5iQDZJggNtYW7N_7mVUWd6aI5KelwgtM4F6Tmt6KRQEhLyaJH6JC5ZocKbVLgEAQQ80mISmxbvMJwAK7CfbzO1IlVAEDstP4y3X-T7jm1gw/s1600/MemoryEditorI.jpg" width="98%" /></a>Note: all machine code generated during this post will commence at 16-bit memory address: <b>&HF000</b>.
<br /><br />
<u>Tutorial</u>
<br />
Type in the following program.  Important: ensure you save state before RUN: Main menu, Save State.
<br />
Note: file is stored at <i>C:\PathToMeka\Saves\Sega BASIC Level 3 V1 (SC-3000) [b1].S00</i>
<pre class="csharp" name="code">
10 CALL &HF000
RUN
</pre>
The program will crash!  There are currently no machine code instructions available at address &HF000.  Therefore, install an <a href="http://en.wikipedia.org/wiki/Assembler_(computing)#Assembler">assembler</a> and write <a href="http://en.wikipedia.org/wiki/Assembly_language">assembly language</a> directly to generate the machine code.
<br /><br />
<u>Installation</u>
<br />
In this post, we target the Sega <a href="http://en.wikipedia.org/wiki/SG-1000#SC-3000">SC-3000</a> hardware: an 8-bit home computer based on the <a href="https://en.wikipedia.org/wiki/Zilog_Z80">Z80</a> chip.
<br /><br />
There are many <a href="http://www.z80.info/z80sdt.htm#SDT_ASM">assemblers</a> available for the Z80 chip but the <a href="http://www.oshonsoft.com/z80.html">Z80 Simulator IDE</a> is one of the best:
<table width="100%">
<tr>
<td valign="top">
<ul>
<li>
Download the <a href="http://www.oshonsoft.com/downloadspage.php">Z80 Simulator Setup</a> and extract
</li>
<li>Double click on z80simulatoride.exe to install</li>
</ul>
</td></tr>
</table>
Also, install <a href="http://en.wikipedia.org/wiki/Hex_editor">Hex Editor</a> program to manipulate the binary data generated from the assembler:
<table width="100%">
<tr>
<td valign="top">
<ul>
<li>
Download <a href="http://mh-nexus.de/downloads/HxDSetupEN.zip">HxD Hex Editor</a> and extract
</li>
<li>Double click the setup.exe to install</li>
</ul>
</td></tr>
</table>
Launch Z80 Simulator, that is, double click z80simulatoride.exe.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh1ZmkcZGdSpSszOY6phQZW4vteIzj04ay5woImprePCDYxus4UkIUkg5R52e1vSMHqMgSCWNmAUo2hA23nZUyWnECSm5gZHQUq-Q9n8D75hPummtv6Cysn7aH-yI58HzZppuup3viiZSE/s1600/01-Z80.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh1ZmkcZGdSpSszOY6phQZW4vteIzj04ay5woImprePCDYxus4UkIUkg5R52e1vSMHqMgSCWNmAUo2hA23nZUyWnECSm5gZHQUq-Q9n8D75hPummtv6Cysn7aH-yI58HzZppuup3viiZSE/s1600/01-Z80.jpg" width="98%" /></a>
Open the Assembler: Tools menu, Assembler.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhvnzpFO56pWTNdplEv-DeoQ1HkttPOzjS_7ypTr08zVGRl4MZCng_uUWoC5Hn8hQCQq7DF0nvknL5cEU7-tEC0KXb9VB-eITacQIs2KNCA0yFza1ywOAr_nN27YdwwfwmV6sYXImRO1os/s1600/02-Z80.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhvnzpFO56pWTNdplEv-DeoQ1HkttPOzjS_7ypTr08zVGRl4MZCng_uUWoC5Hn8hQCQq7DF0nvknL5cEU7-tEC0KXb9VB-eITacQIs2KNCA0yFza1ywOAr_nN27YdwwfwmV6sYXImRO1os/s1600/02-Z80.jpg" width="98%" /></a>
Create a new assembly file: File menu, New.
<br />
Type in the following assembly language:
<pre class="csharp" name="code">
.ORG    0F000H
        RET
</pre>
Save the assembly file: File menu, Save As, Hello.asm.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5FZoaQe3HoyZSijilnulvpNuQYMhhpXy6apj-mSRsu7GHTsdO1sXgdKgiPTOh22-ir0cDvE-CmWtyz9f03pCSX2SIDeEjZfSM6y8T34pnL57BYYGh2FdEZwdGKhpuFcaWjo-YyD6PhO4/s1600/03-Z80.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5FZoaQe3HoyZSijilnulvpNuQYMhhpXy6apj-mSRsu7GHTsdO1sXgdKgiPTOh22-ir0cDvE-CmWtyz9f03pCSX2SIDeEjZfSM6y8T34pnL57BYYGh2FdEZwdGKhpuFcaWjo-YyD6PhO4/s1600/03-Z80.jpg" width="98%" /></a>
Generate the machine code: Tools menu, Assemble (F7).
<br /><br />
This action will generate 3x new files: Hello.hex, Hello.lst and Hello.obj;
<br />
Note: the file that contains the raw binary data is stored in <b>Hello.obj</b>.
<br /><br />
Launch the Hex Editor, that is, double click HxD.exe.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEirlMZBZ58wWAL0u2CX4L-oT0CkZjwYOOTs4EMZ5iYX-Dl1DbkyCENVaAdIF5mvD4nxgp6QNagtquB4o9sixRdpGKz6wYJUbl9zxn6KjDqhRIHmhDWO46mTQG6tjfZIXIv0VZaiVn6ju5M/s1600/01-HxD.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEirlMZBZ58wWAL0u2CX4L-oT0CkZjwYOOTs4EMZ5iYX-Dl1DbkyCENVaAdIF5mvD4nxgp6QNagtquB4o9sixRdpGKz6wYJUbl9zxn6KjDqhRIHmhDWO46mTQG6tjfZIXIv0VZaiVn6ju5M/s1600/01-HxD.jpg" width="98%" /></a>
Open the binary file: File menu, Open, Hello.obj.
<br />
Goto &HF000: Search menu, Goto, Offset: F000.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhvIyINfx9x-dg9HerI0niMTb5_2w1rfx3utSRwV-v67qm630iJ5MvY_8vpQPOnyjlw4qINLO6inpWXiIaNG9-q_f-8tgwdjvZukd3NEwL8cdcKKFQIxKBrIIQYhUU0EQ8ntkibDOn8qj8/s1600/02-HxD.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhvIyINfx9x-dg9HerI0niMTb5_2w1rfx3utSRwV-v67qm630iJ5MvY_8vpQPOnyjlw4qINLO6inpWXiIaNG9-q_f-8tgwdjvZukd3NEwL8cdcKKFQIxKBrIIQYhUU0EQ8ntkibDOn8qj8/s1600/02-HxD.jpg" width="98%" /></a>
Inspect the 16-bit memory address at F000; the hexadecimal &HC9 is stored there. 
<br />
In the example, &HC9 in hexadecimal is the opcode for the <b>RET</b> instruction above.
<br /><br />
Next, copy machine code generated from the assembly above to be consumed in BASIC program:
<br />
Select all machine code generated in Hello.obj, that is, from Block F000-F000 and copy (Ctrl-C).
<br /><br />
In the Hex Editor, open the save file: File menu, Open, <i>Sega BASIC Level 3 V1 (SC-3000) [b1].S00</i>.
<br />
Goto &H706D: Search menu, Goto, Offset: 706D.  Paste (Ctrl-V) machine code there, that is &HC9.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiJJDuRMiu8ugLHSVUCtl1I9Y9HJtw7RgdNv00H0I6jduCKp7fc9N9AFum_3muSmNHDGY0D8UEZqq7uA0oMBfnxene1BuWJRQNBCWemJesZBTWj9GZLO2UJhdLQMUznxM_WlDgxYQBIjOM/s1600/03-HxD.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiJJDuRMiu8ugLHSVUCtl1I9Y9HJtw7RgdNv00H0I6jduCKp7fc9N9AFum_3muSmNHDGY0D8UEZqq7uA0oMBfnxene1BuWJRQNBCWemJesZBTWj9GZLO2UJhdLQMUznxM_WlDgxYQBIjOM/s1600/03-HxD.jpg" width="98%" /></a>
<br /><br />
Launch Sega BASIC Level 3 ROM, that is, double click Sega BASIC Level 3 V1 (SC-3000) [b1].sc.  
<br />
Next, load file that was modified above to save machine code into RAM: Main menu, Load State.
<br /><br />
Activate keyboard to begin typing: Inputs menu, Sega Keyboard. Next, open the Memory Editor: 
<table width="100%">
<tr>
<td valign="top">
<ul>
<li>Tools menu</li>
<li>Memory Editor</li>
<li>Click RAM button</li>
<li>Type <b>F000</b></li>
</ul>
</td></tr>
</table>
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgPry2Sd7P7flSNOaa_15iK0Io8mBw2EZHmCvy4ztphrntQhBd6t11W-QxkmrORJU7JAsHGOhPIf5Fj_4GbLSvVRvDOrEwQvkPnPzEaVOXA20WOFNost_ve22gfTBfBBDVBR3S-3QbmuJU/s1600/MemoryEditorII.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgPry2Sd7P7flSNOaa_15iK0Io8mBw2EZHmCvy4ztphrntQhBd6t11W-QxkmrORJU7JAsHGOhPIf5Fj_4GbLSvVRvDOrEwQvkPnPzEaVOXA20WOFNost_ve22gfTBfBBDVBR3S-3QbmuJU/s1600/MemoryEditorII.jpg" width="98%" /></a>
Inspect the 16-bit memory address &HF000; the hexadecimal &HC9 will now be stored in RAM there. 
<br /><br />
Finally, type RUN again.  On the surface, nothing appears to happen!
<br />
Therefore, check out previous <a href="http://steveproxna.blogspot.ie/2013/07/sega-machine-code-programming.html">post</a> for machine code fundamentals.
<br /><br />
<u>Example</u>
<br />
As an example, let's write the main loop of a simple "Shoot 'em up" style game, similar to the previous <a href="http://steveproxna.blogspot.ie/2013/07/sega-machine-code-programming.html">post</a>, that simply moves a target sprite around the screen based on user input; preferably the joystick. 
<br /><br />
However, write the main loop in assembly language and generate the machine code routines accordingly.
<br /><br />
<u>Sample</u>
<br />
The following code sample is reminiscent of the <a href="http://www.smspower.org/Scans/SegaComputer-Magazine-Issue08?gallerypage=8">tutorial</a> More on the Joystick and Machine Code Routine. 
<br /> 
Follow the tutorial closely to better understand what machine code instructions are required and why. 
<br /><br />
Type in the following program. Important: ensure you save state before RUN: Main menu, Save State.
<br />
Note: file is stored at <i>C:\PathToMeka\Saves\Sega BASIC Level 3 V1 (SC-3000) [b1].S00</i>
<pre class="csharp" name="code">
10 REM SEGA ASSEMBLY PROGRAMMING
20 GOSUB 300
40 SZ=16:MAG1
60 MR=256-SZ:MD=192-SZ
70 TX=MR/2:TY=MD/2
80 SCREEN 2,2:CLS
90 COLOR,1,(0,0)-(255,191),1
100 REM MAIN LOOP
110 SPRITE 0,(TX,TY),0,9
120 CALL &HF000
130 STOP
300 RESTORE 350
310 FOR S=0 TO 3:READ S$:PATTERN S#S,S$:NEXT S
320 RETURN
350 DATA 000039202100012A, 2A01002120390000
360 DATA 00009C0484008054, 54800084049C0000
RUN
</pre>
Again, on the surface, nothing appears to happen!  Therefore, write the main loop in assembly language:
<br />
Launch Z80 Simulator: double click z80simulatoride.exe.  Open the Assembler: Tools menu, Assembler.
<br /><br />
Create a new assembly file: File menu, New.  Type in the following assembly language:
<pre class="csharp" name="code">
.ORG    0F000H
START:  LD A,9BH
        OUT (0DFH),A
CHECK:  IN A,(0DCH)
        CP 0FFH     ; any movement?
        JR Z,CHECK
LEFT:   CP 0FBH     ; move left?
        JR NZ,RIGHT
        CALL READX
        DEC A
        CALL WRITE
        CALL DELAY
        JR CHECK
RIGHT:  CP 0F7H     ; move right?
        JR NZ,UP
        CALL READX
        INC A
        CALL WRITE
        CALL DELAY
        JR CHECK
UP:     CP 0FEH     ; move up?
        JR NZ,DOWN
        CALL READY
        DEC A
        CALL WRITE
        CALL DELAY
        JR CHECK
DOWN:   CP 0FDH     ; move down?
        JR NZ,SHOOT
        CALL READY
        INC A
        CALL WRITE
        CALL DELAY
        JR CHECK
SHOOT:  CP 0EFH     ; press fire?
        JR NZ,CHECK
        RET
READX:  LD HL,3B01H
        CALL 02C32H
        IN A,(0BEH)
        RET
READY:  LD HL,3B00H
        CALL 02C32H
        IN A,(0BEH)
        RET
WRITE:  CALL 02C44H
        OUT (0BEH),A
        RET
DELAY:  LD A,00H
        LD BC,0300H
LOOP:   DEC BC
        CP B
        JR NZ,LOOP
        JR CHECK
</pre>
Save the assembly file: File menu, Save As, Code.asm.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEii4Zv88uDb6TCEnBW7uECwcHMOGVAK65oaVnOoWMisjE-XX9v4EHsKi1MWARxr7d4No34KbQ-lercyRmM4J12QsUUqFXtBFKqCqg-01nwugQj3sfYy3VfnjstKD2xWFXjO6ys05ls_r3I/s1600/04-Z80.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEii4Zv88uDb6TCEnBW7uECwcHMOGVAK65oaVnOoWMisjE-XX9v4EHsKi1MWARxr7d4No34KbQ-lercyRmM4J12QsUUqFXtBFKqCqg-01nwugQj3sfYy3VfnjstKD2xWFXjO6ys05ls_r3I/s1600/04-Z80.jpg" width="98%" /></a>
Generate the machine code: Tools menu, Assemble (F7).
<br /><br />
This action will generate 3x new files: Code.hex, Code.lst and Code.obj;
<br />
Note: the file that contains the raw binary data is stored in <b>Code.obj</b>.
<br /><br />
Launch the Hex Editor, that is, double click HxD.exe.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEirlMZBZ58wWAL0u2CX4L-oT0CkZjwYOOTs4EMZ5iYX-Dl1DbkyCENVaAdIF5mvD4nxgp6QNagtquB4o9sixRdpGKz6wYJUbl9zxn6KjDqhRIHmhDWO46mTQG6tjfZIXIv0VZaiVn6ju5M/s1600/01-HxD.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEirlMZBZ58wWAL0u2CX4L-oT0CkZjwYOOTs4EMZ5iYX-Dl1DbkyCENVaAdIF5mvD4nxgp6QNagtquB4o9sixRdpGKz6wYJUbl9zxn6KjDqhRIHmhDWO46mTQG6tjfZIXIv0VZaiVn6ju5M/s1600/01-HxD.jpg" width="98%" /></a>
Open the binary file: File menu, Open, Code.obj.
<br />
Goto &HF000: Search menu, Goto, Offset: F000.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhRR1R9lNKD5fZ8USReFBB0K8d5XtklsMBVRgAXTCdlSUFuoHPvn_IsTGzIfgr_UyzjUXRphqgUVTAUkRImNq4hBDqmwHdEAaqBKXTtusVYhTUtfHruzwPOCzKwAm9KC2E4hxHhBrTSr1E/s1600/04-HxD.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhRR1R9lNKD5fZ8USReFBB0K8d5XtklsMBVRgAXTCdlSUFuoHPvn_IsTGzIfgr_UyzjUXRphqgUVTAUkRImNq4hBDqmwHdEAaqBKXTtusVYhTUtfHruzwPOCzKwAm9KC2E4hxHhBrTSr1E/s1600/04-HxD.jpg" width="98%" /></a>
Next, copy machine code generated from the assembly above to be consumed in BASIC program:
<br />
Select all machine code generated in Code.obj, that is, from Block F000-F071 and copy (Ctrl-C).
<br /><br />
In the Hex Editor, open the save file: File menu, Open, <i>Sega BASIC Level 3 V1 (SC-3000) [b1].S00</i>.
<br />
Goto &H706D: Search menu, Goto, Offset: 706D.  Paste (Ctrl-V) all copied machine code there.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjq9glOg9fmiYH01NaktaX_udVGySKm6o6o3dddR2Wc6UTLPs4tsW-ZWb_Vp8BzAczQ-n3TiBUhWFVca2g6EQT0DIuy4sIOFR5A1i6f4UKfwGAqiXUk77uQLTG2hRxxNDQ1GecqbLMo8ow/s1600/05-HxD.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjq9glOg9fmiYH01NaktaX_udVGySKm6o6o3dddR2Wc6UTLPs4tsW-ZWb_Vp8BzAczQ-n3TiBUhWFVca2g6EQT0DIuy4sIOFR5A1i6f4UKfwGAqiXUk77uQLTG2hRxxNDQ1GecqbLMo8ow/s1600/05-HxD.jpg" width="98%" /></a>
<br /><br />
Launch Sega BASIC Level 3 ROM, that is, double click Sega BASIC Level 3 V1 (SC-3000) [b1].sc.  
<br />
Next, load file that was modified above to save machine code into RAM: Main menu, Load State.
<br /><br />
Important: after load file, it may be necessary to soft reset emulator; press the "Scroll lock" key.
<br />
Activate keyboard to begin typing: Inputs menu, Sega Keyboard. Next, open the Memory Editor: 
<table width="100%">
<tr>
<td valign="top">
<ul>
<li>Tools menu</li>
<li>Memory Editor</li>
<li>Click RAM button</li>
<li>Type <b>F000</b></li>
</ul>
</td></tr>
</table>
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgV7YCdNzK-rYQAajMJGObraGstpZ8vHkwspQiFKAlfyj-X8jN0sbm_sNhANxhaSFqoBFri7tvcI56_7J6lFDEASwVOOTmC1KI6ywUKnIGV8trQhTZLUvnbnd2aLd8jW4FCLej3661g7Ak/s1600/MemoryEditor.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgV7YCdNzK-rYQAajMJGObraGstpZ8vHkwspQiFKAlfyj-X8jN0sbm_sNhANxhaSFqoBFri7tvcI56_7J6lFDEASwVOOTmC1KI6ywUKnIGV8trQhTZLUvnbnd2aLd8jW4FCLej3661g7Ak/s1600/MemoryEditor.jpg" width="98%" /></a>
Inspect the 16-bit memory address &HF000; all machine code copied will be now stored in RAM there. 
<br />
Finally, type RUN again.
<br /><br />
The graphics screen clears black and positions a red target sprite.  Use the joystick to move target sprite.
<br />
Note: de-activate the keyboard to ensure the joystick takes precedence: Inputs menu, Sega 
Keyboard.
<br /><br />
In this example, moving joystick left, right, up, or down moves sprite in that direction.  Press fire to quit.
<br />
Important: if joystick not configured then try these keys: "<b>J</b>" = left, "<b>M</b>" = right, "<b>7</b>" = up, "<b>U</b>" = down.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj5Lb3O0vD5OeD1XvETMuQtJcivB1TDPZRunn4irQ13x6PMDrdTCBIZI3lxY_cyRiW1J8aItFbfZ_hijzJNu9N88rygmBar26C_skGbkxaFIM76UutT_k9zgygal5VEDlt5S5WC30Eg07Q/s1600/SegaBasicProgam.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj5Lb3O0vD5OeD1XvETMuQtJcivB1TDPZRunn4irQ13x6PMDrdTCBIZI3lxY_cyRiW1J8aItFbfZ_hijzJNu9N88rygmBar26C_skGbkxaFIM76UutT_k9zgygal5VEDlt5S5WC30Eg07Q/s320/SegaBasicProgam.jpg" width="98%" /></a>
Experiment with different delay speeds at runtime by manipulating memory directly:
<br />
Note: original time delay is 0300 but is stored in memory as 00 03 (<a href="http://en.wikipedia.org/wiki/Endianness#Little-endian">Little-endian</a>).
<table width="100%">
<tr>
<td valign="top">
<ul>
<li>Tools menu</li>
<li>Memory Editor</li>
<li>Click RAM button</li>
<li>Type <b>F06B</b></li>
<li>Enter "02" (<i>faster</i>)</li>
<li>Enter "04" (<i>slower</i>)</li>
</ul>
</td></tr>
</table>
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjE3vZaDBc2j8by6WjByE6lXkfMNvNd9WppLpHQ9rkY0cfYHDjjLXGQufLshVjov_TvDk-Uj836jF9q1xx3Ghn008FLdoKq6B-F-IXfQnMd5xgp8gTPWDt_htvP4Wa3dY-FdHHJelR5zVk/s1600/DelayUpdate.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjE3vZaDBc2j8by6WjByE6lXkfMNvNd9WppLpHQ9rkY0cfYHDjjLXGQufLshVjov_TvDk-Uj836jF9q1xx3Ghn008FLdoKq6B-F-IXfQnMd5xgp8gTPWDt_htvP4Wa3dY-FdHHJelR5zVk/s1600/DelayUpdate.jpg" width="98%" /></a>
For completeness, here is the disassembled machine code from the <a href="http://www.smspower.org/Scans/SegaComputer-Magazine-Issue08?gallerypage=8">tutorial</a> in its entirety:
<pre class="csharp" name="code">
--------------------------------------------------
Z80    DISASSEMBLER     LISTING
Line   Addr Opcodes     Label   Instruction
--------------------------------------------------
0000   0000             .ORG    0F000H
0001   F000 3E 9B       START:  LD A,9BH
0002   F002 D3 DF               OUT (0DFH),A
0003   F004 DB DC       CHECK:  IN A,(0DCH)
0004   F006 FE FF               CP 0FFH  ; any movement?
0005   F008 28 FA               JR Z,CHECK
0006   F00A FE FB       LEFT:   CP 0FBH  ; move left?
0007   F00C 20 0C               JR NZ,RIGHT
0008   F00E CD 4F F0            CALL READX
0009   F011 3D                  DEC A
0010   F012 CD 61 F0            CALL WRITE
0011   F015 CD 67 F0            CALL DELAY
0012   F018 18 EA               JR CHECK
0013   F01A FE F7       RIGHT:  CP 0F7H  ; move right?
0014   F01C 20 0C               JR NZ,UP
0015   F01E CD 4F F0            CALL READX
0016   F021 3C                  INC A
0017   F022 CD 61 F0            CALL WRITE
0018   F025 CD 67 F0            CALL DELAY
0019   F028 18 DA               JR CHECK
0020   F02A FE FE       UP:     CP 0FEH  ; move up?
0021   F02C 20 0C               JR NZ,DOWN
0022   F02E CD 58 F0            CALL READY
0023   F031 3D                  DEC A
0024   F032 CD 61 F0            CALL WRITE
0025   F035 CD 67 F0            CALL DELAY
0026   F038 18 CA               JR CHECK
0027   F03A FE FD       DOWN:   CP 0FDH  ; move down?
0028   F03C 20 0C               JR NZ,SHOOT
0029   F03E CD 58 F0            CALL READY
0030   F041 3C                  INC A
0031   F042 CD 61 F0            CALL WRITE
0032   F045 CD 67 F0            CALL DELAY
0033   F048 18 BA               JR CHECK
0034   F04A FE EF       SHOOT:  CP 0EFH  ; press fire?
0035   F04C 20 B6               JR NZ,CHECK
0036   F04E C9                  RET
0037   F04F 21 01 3B    READX:  LD HL,3B01H
0038   F052 CD 32 2C            CALL 02C32H
0039   F055 DB BE               IN A,(0BEH)
0040   F057 C9                  RET
0041   F058 21 00 3B    READY:  LD HL,3B00H
0042   F05B CD 32 2C            CALL 02C32H
0043   F05E DB BE               IN A,(0BEH)
0044   F060 C9                  RET
0045   F061 CD 44 2C    WRITE:  CALL 02C44H
0046   F064 D3 BE               OUT (0BEH),A
0047   F066 C9                  RET
0048   F067 3E 00       DELAY:  LD A,00H
0049   F069 01 00 03            LD BC,0300H
0050   F06C 0B          LOOP:   DEC BC
0051   F06D B8                  CP B
0052   F06E 20 FC               JR NZ,LOOP
0053   F070 18 92               JR CHECK
</pre>
Important: machine code programs will crash if there are errors; they are not as forgiving as BASIC.  Therefore, ensure you save state before you RUN machine code programs: Main menu, Save State. 
<br /><br />
<u>Summary</u>
<br />
In this post, assembly programming was introduced to generate machine code to target Sega hardware.
<br /><br />
However, all assembly programming and machine code written thus far require a <a href="http://en.wikipedia.org/wiki/BASIC">BASIC</a> program driver; Cartridge-based video games built for 8-bit <a href="http://steveproxna.blogspot.ie/2013/06/sega-retro-gaming.html">Sega Retro Gaming</a> consoles were written in pure assembly!
<br /><br />
This can be resolved by using tools to write to <a href="http://en.wikipedia.org/wiki/SG-1000">SG-1000</a>, <a href="http://en.wikipedia.org/wiki/SG-1000#SC-3000">SC-3000</a>, and the <a href="http://en.wikipedia.org/wiki/Master_System">Sega Master System</a> directly.  This will be the topic in the next <a href="http://steveproxna.blogspot.ie/2013/09/sega-console-programming.html">post</a>.
</span>