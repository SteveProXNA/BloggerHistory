<span style="font-family:verdana;font-size:85%;">
In 2013, we checked out <a href="http://steveproxna.blogspot.com/2013/06/sega-retro-gaming.html">Sega Retro Gaming</a>, specifically 8-bit hardware manufactured by Sega such as the <a href="http://en.wikipedia.org/wiki/SG-1000">SG-1000</a>, <a href="http://en.wikipedia.org/wiki/SG-1000#SC-3000">SC-3000</a> and Sega <a href="http://en.wikipedia.org/wiki/Master_System">Master System</a>.  Now, we turn our attention to the 16-bit <a href="https://segaretro.org/Sega_Mega_Drive">Mega Drive</a> [Genesis].
<br /><br />
In 2017, we checked out <a href="http://steveproxna.blogspot.com/2017/09/devkitsms-programming-setup.html">devkitSMS Programming Setup</a> to build 8-bit game code for the Master System.  As we upgrade to the 16-bit MD we would like to replicate this process now using Sega Genesis Dev Kit [<a href="https://github.com/Stephane-D/SGDK">SGDK</a>].
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjpEkfAZYBnX4ncwS4KMK673R85KxON-ZC4dEWnj-UktB5wVRewl3NjReO9lBEhQYlBt5CibbTyD_4D3Q7c4Zv1kB6RCAkzt7h2OVwpJGhuwD2tusF6Se3t4dc750dTlyDFb4ZEr9TkMl0/s1600/sgdk.png" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjpEkfAZYBnX4ncwS4KMK673R85KxON-ZC4dEWnj-UktB5wVRewl3NjReO9lBEhQYlBt5CibbTyD_4D3Q7c4Zv1kB6RCAkzt7h2OVwpJGhuwD2tusF6Se3t4dc750dTlyDFb4ZEr9TkMl0/s640/sgdk.png" width="98%" height="292" /></a>
<br />
Letâ€™s check it out!
<br /><br />
<u>SGDK</u><br />
The <a href="https://github.com/Stephane-D/SGDK">SGDK</a> is a free development kit allowing you to develop software in <a href="http://en.wikipedia.org/wiki/C_(programming_language)">C language</a> for the Sega Mega Drive.  Note that SGDK also requires <a href="https://www.java.com/en/download">Java</a> (custom tools need it) so you need to have Java installed on your system.
<br /><br />
IMPORTANT<br />
Ensure an up-to-date version of Java is installed, e.g. version "12.0.2" 2019-07-16 otherwise builds may fail!
<br /><br />
<u>Software</u><br />
Follow most instructions from the previous <a href="http://steveproxna.blogspot.co.uk/2014/11/z88dk-programming-sample.html">post</a>: this documents how to setup some pre-requisite software.
<br /><br />
Here is a summary of some of the software to be installed:
<table width="98%" border="0">
<tr>
<td>
<table width="100%" border="1">
<tr><td valign="top">&nbsp;<b>Name</b></td><td valign="top">&nbsp;<b>Version</b></td></tr>
<tr><td valign="top">&nbsp;C IDE Editor</td><td valign="top">&nbsp;<a href="https://my.visualstudio.com/Downloads?q=visual%20studio%202015&wt.mc_id=o~msft~vscom~older-downloads">Visual Studio 2015</a></td></tr>
<tr><td valign="top">&nbsp;Emulators</td><td valign="top">&nbsp<a href="https://retrocdn.net/images/6/6c/Fusion364.7z">Fusion</a>, <a href="https://retrocdn.net/images/4/43/Gens_KMod_v0.7.3.7z">Gens KMod</a></td></tr>
</table>
</td>
<td>&nbsp;</td>
<td>
<table width="100%" border="1">
<tr><td valign="top">&nbsp;<b>Name</b></td><td valign="top">&nbsp;<b>Version</b></td></tr>
<tr><td valign="top">&nbsp;Cross compiler</td><td valign="top">&nbsp;<a href="https://gcc.gnu.org/">GCC</a></td></tr>
<tr><td valign="top">&nbsp;Make files</td><td valign="top">&nbsp;<a href="http://cygwin.com/install.html">Cygwin</a></td></tr>
</table>
</td>
</tr>
</table>
<br />
Gens KMod "gens" can also be built from <a href="https://bitbucket.org/SpritesMind/genskmod">source</a>.  Add gens.exe to Gens folder similar to Fusion in this <a href="http://steveproxna.blogspot.com/2018/03/devkitsms-programming-sample-ii.html">post</a>.  Note: you may already have <a href="https://gcc.gnu.org/">gcc</a> configured on you computer if you previously installed cygwin or Git Bash
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgV46dm90_-Pk5MAa811jIIkDCs_DOd4Qipt1rcMGiFhf70MpaUEUdcOvy1hVDW2-e9HN-QSRa14HsL-pldIG2A5BZKE8kU1agLr7ro6iHdD4Q-oQfaStADhX40vFe2OL7n3KSqi7NiVlo/s1600/gcc_version.png" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgV46dm90_-Pk5MAa811jIIkDCs_DOd4Qipt1rcMGiFhf70MpaUEUdcOvy1hVDW2-e9HN-QSRa14HsL-pldIG2A5BZKE8kU1agLr7ro6iHdD4Q-oQfaStADhX40vFe2OL7n3KSqi7NiVlo/s640/gcc_version.png" width="98%" height="154" /></a>
<br /><br />
<b>SGDK</b><br />
Navigate to the <a href="https://github.com/Stephane-D/SGDK">SGDK</a> repository on github: <a href="https://twitter.com/MegaDriveDEV">@MegadriveDev</a> has full instructions 
<a href="https://github.com/Stephane-D/SGDK/wiki/SGDK-Installation">here</a>.  Download the latest release from SGDK archive e.g. <a href="https://github.com/Stephane-D/SGDK/releases/download/v1.51/sgdk151.7z">1.51</a> or simply git clone the latest source code.  Extract code into C:\SGDK.
<br /><br />
Setup the following environment variables for GDK + GDK_WIN to be used throughout SGDK development.  Add the following two environment variables: System | Advanced system settings | Environment Variables:
<table width="98%" border="1">
<tr>
<td valign="top">&nbsp;<b>Variable</b></td>
<td valign="top">&nbsp;<b>Value</b></td>
<td valign="top">&nbsp;<b>Description</b></td>
</tr>
<tr>
<td valign="top">&nbsp;GDK</td>
<td valign="top">&nbsp;C:/SGDK</td>
<td valign="top">&nbsp;UNIX path format</td>
</tr>
<tr>
<td valign="top">&nbsp;GDK_WIN</td>
<td valign="top">&nbsp;C:\SGDK</td>
<td valign="top">&nbsp;Windows path format</td>
</tr>
</table>
<br />
Next, Stephane advises to add the %GDK_WIN%\bin to your <a href="https://en.wikipedia.org/wiki/PATH_(variable)">PATH</a> variable being careful if you have another GCC installation as you may have conflicts.  I have multiple GCC installs but have not experienced any issues.
<br /><br />
Finally, generate the SGDK library <i>%GDK%/lib/libmd.a</i> by entering the following command Start | run | cmd.
<pre class="csharp" name="code">
%GDK_WIN%\bin\make -f %GDK_WIN%\makelib.gen
</pre>
<br />
<u>Example</u><br />
As an example, let's write a simple program that prints "Hello World" using SGDK.  Create new directory: C:\HelloWorld.  Create main.c file + enter the following code similar to the Hello World <a href="https://github.com/Stephane-D/SGDK/wiki/Tuto-Hello-World">tutorial</a> program.
<br /><br />
main.c
<pre class="csharp" name="code">
#include &lt;genesis.h&gt;
int main()
{
	VDP_drawText( "Hello Genny World!", 10, 13 );
	while( 1 )
	{
		VDP_waitVSync();
	}
	return 0;
}
</pre>
<br />
<u>Build</u><br />
Manually compile, link and execute the Hello World program. Launch command prompt: Start | Run | cmd.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEimPgsdl2WqcQa3vE_0pQB2fLv0RigFn6cKPqa9s7a0O8G7r6NpAlUnCLm_cOcH6xPLjhikG70NdYz-FDI1JnLdxoIUqA7rgR6GQMcZ0vaYL-p15ZFULmW7JeOR09JemssmwIWxBnGG0DU/s1600/Compile.png" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEimPgsdl2WqcQa3vE_0pQB2fLv0RigFn6cKPqa9s7a0O8G7r6NpAlUnCLm_cOcH6xPLjhikG70NdYz-FDI1JnLdxoIUqA7rgR6GQMcZ0vaYL-p15ZFULmW7JeOR09JemssmwIWxBnGG0DU/s640/Compile.png" width="98%" height="295" /></a>
<br /><br />
Change directory cd C:\HelloWorld. Next, execute the following make command to produce the output ROM:
<table width="99%" border="1">
<tr>
<td valign="top">&nbsp;ACTION</td>
<td valign="top">&nbsp;COMMAND</td>
<td valign="top">&nbsp;OUTPUT</td>
</tr>
<tr>
<td valign="top">&nbsp;Compile</td>
<td valign="top">&nbsp;%GDK_WIN%\bin\make -f %GDK_WIN%\makefile.gen</td>
<td valign="top">&nbsp;out\rom.bin</td>
</tr>
</table>
<br />
Finally, type <b> out\rom.bin</b>. The Hello World program should launch in the Fusion emulator.
<br />
Congratulations! You have just written your first Mega Drive program using the <a href="https://github.com/Stephane-D/SGDK">SGDK</a>.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjcfb_AZ3-LyeyAjq18J7ohfw9ISDm4FVuPTk30DGQfkDsLaJXlFDUL5i47JiE_sPXw6424KxWiHyjYv8-pHfS6828WVuciyPS7TUh1de86bxhT_2cZQSOsYkNaNNIi4g9RdXCCMS9PGlk/s1600/HelloWorld.png" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjcfb_AZ3-LyeyAjq18J7ohfw9ISDm4FVuPTk30DGQfkDsLaJXlFDUL5i47JiE_sPXw6424KxWiHyjYv8-pHfS6828WVuciyPS7TUh1de86bxhT_2cZQSOsYkNaNNIi4g9RdXCCMS9PGlk/s640/HelloWorld.png" width="98%" height="526" /></a>
<br /><br />
<u>Automate</u><br />
Let's automate the build process: create C:\HelloWorld\build.bat script file that contains the commands:
<pre class="csharp" name="code">
@echo off
%GDK_WIN%\bin\make -f %GDK_WIN%\makefile.gen
out\rom.bin
</pre>
<br />
<u>Code Blocks</u><br />
Follow all instructions <a href="https://github.com/Stephane-D/SGDK/wiki/Setup-SGDK-with-CodeBlocks">here</a> to setup SGDK with CodeBlocks.  <a href="https://twitter.com/matteusbeus">@matteusbeus</a> has great <a href="https://www.youtube.com/watch?v=cDEGpLxKDK0">video</a> on how to setup SGDK using CodeBlocks also.  Check out his <a href="https://www.youtube.com/channel/UC4KBnGlYvFFtjNnce5cQskw">YouTube</a> channel for other interesting videos with SGDK topics.
<br /><br />
<u>Eclipse</u><br />
Follow all instructions <a href="https://github.com/Stephane-D/SGDK/wiki/Setup-SGDK-with-Eclipse">here</a> to setup SGDK with Eclipse.  <a href="https://twitter.com/spritesmind">@SpritesMind</a> has a great tutorial on how to remote debug SGDK code using Gens KMod with Eclipse also.  Follow all instructions <a href="https://gendev.spritesmind.net/page-gdb.html">here</a> to complete debug setup:
<br /><br />
Launch Eclipse.  Choose Run menu | Debug Configurations | C/C++ Remote Application | New Configuration
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEips0jHhf7Vk6q3kTRvZSJdqy55OAnqC2JhYqX8tBxqIwNQEb1WrEpcHn2j6WKX0fOAm98SaAVLWzav9ioywoGCAM2X1XtT6Tk6nGOo0rso6C6Vv37Oma4vVXYT4NLeGx2WjmIcv3UK0XE/s1600/Eclipse01.png" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEips0jHhf7Vk6q3kTRvZSJdqy55OAnqC2JhYqX8tBxqIwNQEb1WrEpcHn2j6WKX0fOAm98SaAVLWzav9ioywoGCAM2X1XtT6Tk6nGOo0rso6C6Vv37Oma4vVXYT4NLeGx2WjmIcv3UK0XE/s640/Eclipse01.png" width="98%" height="374" /></a>
<table width="99%" border="1">
<tr>
<td valign=top>&nbsp;Name</td>
<td valign=top>&nbsp;Remote Debugging</td>
</tr>
<tr>
<td valign=top>&nbsp;Project</td>
<td valign=top>&nbsp;HelloWorld</td>
</tr>
<tr>
<td valign=top>&nbsp;C/C++ Application</td>
<td valign=top>&nbsp;C:\HelloWorld\out\rom.out</td>
</tr>
<tr>
<td valign=top>&nbsp;Disable auto build</td>
<td valign=top>&nbsp;CHECKED</td>
</tr>
</table>
IMPORTANT ensure "Using GDB (DSF) Manual Remote Debugging Launcher" is preferred launcher selected!
<br /><br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgaddJ73s7c_FGC5is1TUA2Sn10zJM71et8Jfs3ohausFpa2vc4S5icspnnOTiEAs_j_TQ82NlsKwFNmoO42vACtr4o4d7EKiXwBhj7gCGfVgx_17FZCiNt_HRjVv-XPDCigQ1uMzN0DYI/s1600/Eclipse02.png" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgaddJ73s7c_FGC5is1TUA2Sn10zJM71et8Jfs3ohausFpa2vc4S5icspnnOTiEAs_j_TQ82NlsKwFNmoO42vACtr4o4d7EKiXwBhj7gCGfVgx_17FZCiNt_HRjVv-XPDCigQ1uMzN0DYI/s640/Eclipse02.png" width="98%" height="454" /></a>
<table width="99%" border="1">
<tr>
<td valign=top>&nbsp;Stop on startup as: main</td>
<td valign=top>&nbsp;CHECKED</td>
</tr>
<tr>
<td valign=top>&nbsp;GDB debugger</td>
<td valign=top>&nbsp;C:SGDK\bin\gdb.exe</td>
</tr>
<tr>
<td valign=top>&nbsp;GDB command line</td>
<td valign=top>&nbsp;.gdbinit</td>
</tr>
</table>
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj5je3sI-YoBpNpil6xGLmUn0Wdf9WxX25tipybot0PcWxL0b0HohZZCyXNb9GpPQsdQDi-XE_xCD11zSBNosB98WDAQaDTTlozKBL0Wgzan_YX2gq_9KRp3P2ZBjIhhCbeqC9i2eky1Zo/s1600/Eclipse03.png" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj5je3sI-YoBpNpil6xGLmUn0Wdf9WxX25tipybot0PcWxL0b0HohZZCyXNb9GpPQsdQDi-XE_xCD11zSBNosB98WDAQaDTTlozKBL0Wgzan_YX2gq_9KRp3P2ZBjIhhCbeqC9i2eky1Zo/s640/Eclipse03.png" width="98%" height="345" /></a>
<table width="99%" border="1">
<tr>
<td valign=top>&nbsp;Type</td>
<td valign=top>&nbsp;TCP</td>
</tr>
<tr>
<td valign=top>&nbsp;Host name or IP address</td>
<td valign=top>&nbsp;localhost</td>
</tr>
<tr>
<td valign=top>&nbsp;Port number</td>
<td valign=top>&nbsp;6868</td>
</tr>
</table>
Build project.  Load rom.bin in gens.  Set breakpoints.  Click debug.  Hit Tab in gens to refresh + debug code!
<br /><br />
<u>Visual Studio Code</u><br />
<a href="https://twitter.com/ohsat_games">@ohsat_games</a> has a great <a href="https://www.ohsat.com/tutorial/megapong/megapong-2">tutorial</a> on how to setup SGDK using Visual Studio Code.  You can even <a href="https://marketplace.visualstudio.com/items?itemName=zerasul.genesis-code">install</a> the Genesis Code extension for code auto completion and to streamline the build process all from within the IDE.
<br /><br />
Further SGDK tutorials from @ohsat_games can be found <a href="https://www.ohsat.com/tutorial">here</a>.  All projects have a similar build batch script:
<pre class="csharp" name="code">
%GDK_WIN%\bin\make -f %GDK_WIN%\makefile.gen
</pre>
<br />
<u>Visual Studio 2015</u><br />
<a href="https://www.youtube.com/channel/UCJkDjU_5xCeu5kQ2WE38izg">Retro Mike</a> has a great <a href="https://www.youtube.com/watch?v=Kx8__lr4Ao4">video</a> on how to setup SGDK using Visual Studio 2015.  Launch Visual Studio 2015. File | New | Project... | Visual C++ | General | Makefile Project.  Enter the following name + location info:
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjPpHjzSaqzIi2wZhREf5A0oTyguWUQzgSlP1uwxl9SB6HTufINCEKnSFKBY_y1DTFOPl1DXmD78IU9TEBFV2rmi5Ny8UgkHxqSKQx8f0ff0YrSOjxsSjoFRbrcoB-kkowgRZDCHTVEBcg/s1600/HelloWorld01.png" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjPpHjzSaqzIi2wZhREf5A0oTyguWUQzgSlP1uwxl9SB6HTufINCEKnSFKBY_y1DTFOPl1DXmD78IU9TEBFV2rmi5Ny8UgkHxqSKQx8f0ff0YrSOjxsSjoFRbrcoB-kkowgRZDCHTVEBcg/s640/HelloWorld01.png" width="98%" height="460" /></a>
<table width="99%" border="1">
<tr>
<td valign="top">&nbsp;Name:</td>
<td valign="top">&nbsp;HelloWorld</td>
</tr>
<tr>
<td valign="top">&nbsp;Location:</td>
<td valign="top">&nbsp;C:\</td>
</tr>
<tr>
<td valign="top">&nbsp;Create directory for solution</td>
<td valign="top">&nbsp;UNCHECKED</td>
</tr>
</table>
<br />
Choose Next.  Enter the following Build command: <i>%GDK_WIN%\bin\make -f %GDK_WIN%\makefile.gen</i>
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgBUaA8BbaOzaHHBoLRa_zO_yOY65OJaJ7f5iYZN-icWJ_yKgMNpZB2Ckfbv3HDHEXZKE0o6oG1Bb7W_LYF1-Xg2dndFmjEdSJnRtDir796BCHvNjyekIgtycce7T1V24uYG1VK7CUPbP8/s1600/HelloWorld02.png" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgBUaA8BbaOzaHHBoLRa_zO_yOY65OJaJ7f5iYZN-icWJ_yKgMNpZB2Ckfbv3HDHEXZKE0o6oG1Bb7W_LYF1-Xg2dndFmjEdSJnRtDir796BCHvNjyekIgtycce7T1V24uYG1VK7CUPbP8/s640/HelloWorld02.png" width="98%" height="500" /></a>
<br /><br />
Choose Finish.  Enter the previous "Hello World" code as above.  Finally, right click Project | Properties | VC++ Directories | Include Directories.  Enter the following in order to include SGDK header files: <i>$(GDK_WIN)\inc</i>
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhrl7xeYuvvjbgsRiZxD4YBmz_bst7QQcedMHoN2wVRMbsduVNP-_bSx1ladw8a1wEe5pNn1fSvhyNxy2NsJA_jxJBnztfZH7wR-0Ae3j-N0-bzr__x_vACEeceFj1pfqef3OPRDxaEeCc/s1600/VS2015_Include.png" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhrl7xeYuvvjbgsRiZxD4YBmz_bst7QQcedMHoN2wVRMbsduVNP-_bSx1ladw8a1wEe5pNn1fSvhyNxy2NsJA_jxJBnztfZH7wR-0Ae3j-N0-bzr__x_vACEeceFj1pfqef3OPRDxaEeCc/s640/VS2015_Include.png" width="98%" height="424" /></a>
<br /><br />
Press Ctrl + Shift + B to build source code and produce <b>out\rom.bin</b>.  Launch Fusion emu + load ROM file!  Alternatively, setup "Remote" debugging configuration in Visual Studio and Press Ctrl + F5 to build and run.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEioDJd2BdHRgpx7OQgxtoXQSNs7H75z9K-H8i8yFcvBIwh_RRX9GSjfe15Ke633Vp9XProlvkTFa-ZFjC0FMMZdzM2s0dZDN7G9quKj-_GGZcHFJ4g5j3kyVZMWTsg0OInzin_GnhWHFY0/s1600/VS2015_Remote.png" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEioDJd2BdHRgpx7OQgxtoXQSNs7H75z9K-H8i8yFcvBIwh_RRX9GSjfe15Ke633Vp9XProlvkTFa-ZFjC0FMMZdzM2s0dZDN7G9quKj-_GGZcHFJ4g5j3kyVZMWTsg0OInzin_GnhWHFY0/s640/VS2015_Remote.png" width="98%" height="424" /></a>
<br /><br />
Right click Project | Properties | Debugging | Remote Windows Debugger.  Update in the following properties:
<table width="99%" border="1">
<tr>
<td valign=top>&nbsp;Remote Command</td>
<td valign=top>&nbsp;C:\SEGA\Fusion\Fusion.exe</td>
</tr>
<tr>
<td valign=top>&nbsp;Remote Command Arguments</td>
<td valign=top>&nbsp;out\rom.bin</td>
</tr>
<tr>
<td valign=top>&nbsp;Connection</td>
<td valign=top>&nbsp;Remote with no authentication</td>
</tr>
<tr>
<td valign=top>&nbsp;Debugger Type</td>
<td valign=top>&nbsp;Native Only</td>
</tr>
<tr>
<td valign=top>&nbsp;Attach</td>
<td valign=top>&nbsp;Yes</td>
</tr>
</table>
<br /><br />
<u>Summary</u><br />
To summarize, there are multiple IDE setups available to use the <a href="https://github.com/Stephane-D/SGDK">SGDK</a>.  However, despite VS2015 being the most applicable to our previous <a href="http://steveproxna.blogspot.com/2017/09/devkitsms-programming-setup.html">devkitSMS</a> process, we're still not able to debug step thru the C source code.
<br /><br />
Ultimately, we would like to build + debug step thru the C source code during SGDK development whilst also being able to build + run the ROM output file all from in Visual Studio.  This will be the topic of the next <a href="https://steveproxna.blogspot.com/2020/11/sgdk-programming-sample.html">post</a>.
</span>