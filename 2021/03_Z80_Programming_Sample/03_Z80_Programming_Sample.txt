<span style="font-family:verdana;font-size:85%;">
In the previous <a href="https://steveproxna.blogspot.com/2021/02/z80-programming-setup.html">post</a>, we checked out Z80 Programming Setup for the <a href="https://en.wikipedia.org/wiki/Master_System">Sega Master System</a>: an 8-bit video game console based on the <a href="https://en.wikipedia.org/wiki/Zilog_Z80">Z80</a> chip.  Here we used <a href="https://www.villehelin.com/wla.html">WLA-DX</a> assembler for our development environment.
<br /><br />
Now that we are setup, we would like to analyze existing <a href="https://www.smspower.org/Homebrew/Index">Indie</a> game projects for the Sega Master System and disassemble some classic 8-bit commercial <a href="https://coolrom.com.au/roms/mastersystem">games</a> to better understand the Z80 development process.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhVsvQ-uD4SFr6avsh6vtuAy4wCLpzHdasA6hvcImyB7LPJNdM_fyFkUpRtYpR0h55JKGjIjmBmPbkKDvzON-m7GljSTv8rOVP9zUj_tPkK9I66NuK0R801mbVKYXzMOz9w7XykM9HvonI/s622/MegaMan.jpg"><img alt="" border="0" width="98%" data-original-height="480" data-original-width="622" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhVsvQ-uD4SFr6avsh6vtuAy4wCLpzHdasA6hvcImyB7LPJNdM_fyFkUpRtYpR0h55JKGjIjmBmPbkKDvzON-m7GljSTv8rOVP9zUj_tPkK9I66NuK0R801mbVKYXzMOz9w7XykM9HvonI/s600/MegaMan.jpg"/></a>
<br />
Let's check it out!
<br /><br />
<u>Software</u><br />
Follow all instructions from the previous <a href="https://steveproxna.blogspot.com/2021/02/z80-programming-setup.html">post</a>: this documents how to setup all the pre-requisite software.
Note: ensure you have downloaded and installed <a href="https://www.villehelin.com/wla.html">WLA-DX</a> assembler + <a href="https://code.visualstudio.com">Visual Studio</a> Code cross platform.
<br />
<br />
<u>Homebrew Games</u><br />
In the previous post, we setup the obligatory "<a href="http://www.smspower.org/maxim/uploads/HowToProgram/helloworld.zip">Hello World</a>" program.  Now we would like to analyze some larger Z80 projects.  Checkout "<a href="https://www.smspower.org/Articles/CreateARacingGame">Racing Game</a>" article on SMS Power! which is an in depth coding tutorial.
<br /><br />
<b>Car Racer</b> (classic)<br />
Create C:\CarRacerClassic or ~/CarRacerClassic.  Copy <b><a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/CarRacerClassic/.vscode">.vscode</a></b> folder from previous post with <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerClassic/.vscode/launch.json">launch.json</a> + <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerClassic/.vscode/tasks.json">tasks.json</a>.  Copy <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerClassic/build.bat">build.bat</a> + <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerClassic/build.sh">build.sh</a>.  Don't forget to grant execute permission chmod +x build.sh command.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjYNrpl0BO9EpNRfXyvWzfUJDgvfD318jG1jAFiqrLSZOT-IE69Ut8ql8AaiHLi034UHmcHhnXQvOmEr46gjk908LfGC-1QJorfWPVJsmJJ-FVdVgNkOhVtDrhvqo9wEX4WB0AFP8A1aXc/s640/CarRacer01.jpg"><img alt="" border="0" width="98%" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjYNrpl0BO9EpNRfXyvWzfUJDgvfD318jG1jAFiqrLSZOT-IE69Ut8ql8AaiHLi034UHmcHhnXQvOmEr46gjk908LfGC-1QJorfWPVJsmJJ-FVdVgNkOhVtDrhvqo9wEX4WB0AFP8A1aXc/s600/CarRacer01.jpg"/></a>
<br />
Download <a href="https://www.smspower.org/uploads/Homebrew/Racer-SMS-2.00.zip">source</a> code.  Copy <a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/CarRacerClassic/Assets">Assets</a> folder to CarRacerClassic.  Copy <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerClassic/main.asm">main.asm</a> file from Racer (classic) folder Version 1.12 here also.  Launch VS Code.  Some things to remember when coding Z80 source cross platform:
<ol>
<li>&nbsp;Ensure forward slash "/" used at all times for cross platform development</li>
<li>&nbsp;Ensure case sensitive folders + files are used at all times for include files</li>
<li>&nbsp;Ensure carriage returns is used between variables to avoid wla-dx errors</li> 
</ol>
<br />
Press Ctrl + Shift + B to execute build script => compile, link and run <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerClassic/output.sms">output.sms</a> launched from Emulicious!  Assumption <a href="https://emulicious.net">Emulicious</a> installed C:\SEGA\Emulicious on Windows or ~/SEGA/Emulicious Mac OS/X + Linux.
<br /><br />
<i>Debugging</i><br />
Launch Emulicious externally.  Ensure Emulicious <a href="https://marketplace.visualstudio.com/items?itemName=emulicious.emulicious-debugger">Debugger</a> is installed with VS Code as per previous <a href="https://steveproxna.blogspot.com/2021/02/z80-programming-setup.html">post</a>.  Open <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerClassic/main.asm">main.asm</a> and set breakpoints.  Press F5. Emulicious debugger should now break into Z80 assembly source code! Step through + investigate register variables, stackframes, access watch window, call stack:
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg19e-06WOu2qedGLcHRvL3LnxDxL6MRYoCw0eFEXJCUpYv8Yy_H19iNUcsa06CG8ZO3rRa9XpNCZvo7U9sGic4J5qAaJMMDCEdLm2wRzxQSXh9LEL7Fi_SauYot_lqPp3SlTyrKzAn0Uc/s896/CarRacerDebug.jpg"><img alt="" border="0" width="98%" data-original-height="828" data-original-width="896" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg19e-06WOu2qedGLcHRvL3LnxDxL6MRYoCw0eFEXJCUpYv8Yy_H19iNUcsa06CG8ZO3rRa9XpNCZvo7U9sGic4J5qAaJMMDCEdLm2wRzxQSXh9LEL7Fi_SauYot_lqPp3SlTyrKzAn0Uc/s600/CarRacerDebug.jpg"/></a>
<br /><br />
<b>Car Racer</b> (rebooted)<br />
Create C:\CarRacerRebooted or ~/CarRacerRebooted.  Copy <b><a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/CarRacerRebooted/.vscode">.vscode</a></b> folder from above with <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerRebooted/.vscode/launch.json">launch.json</a> and <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerRebooted/.vscode/tasks.json">tasks.json</a>.  Copy <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerRebooted/build.bat">build.bat</a> + <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerRebooted/build.sh">build.sh</a>.  Don't forget to grant execute permission chmod +x build.sh command.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjVQp3inTgYLOiXg7AM3xLkL77M9otZDIHAFRHm-flO2HUJl3YXJVMU5anY0rdQxXmPzTtBK_aBZMpe-aaRida4hUzioq3UjtVdTangNhiTYbIrW8VY0FXJ1aFK08IB9KquX1HZcbEwXbM/s640/CarRacer02.jpg"><img alt="" border="0" width="98%" data-original-height="412" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjVQp3inTgYLOiXg7AM3xLkL77M9otZDIHAFRHm-flO2HUJl3YXJVMU5anY0rdQxXmPzTtBK_aBZMpe-aaRida4hUzioq3UjtVdTangNhiTYbIrW8VY0FXJ1aFK08IB9KquX1HZcbEwXbM/s600/CarRacer02.jpg"/></a>
<br />
Download <a href="https://www.smspower.org/uploads/Homebrew/Racer-SMS-2.00.zip">source</a> code.  Copy all assets folders with *.inc files to CarRacerRebooted.  Copy <a href="https://github.com/SteveProXNA/Z80code/blob/main/03-Codes/CarRacerRebooted/main.asm">main.asm</a> file from Racer (rebooted) folder here also.  Launch VS Code.  Tweak Z80 assembly code as above to be cross platform.
<br /><br />
Press Ctrl + Shift + B to execute build script => compile, link and run!  Repeat process for all these projects:
<table width="100%" border="0">
<tr>
<td>
<table width="100%" border="1">
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/Astroswab">Astroswab</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/CarRacerClassic">Car Racer [classic]</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/CarRacerRebooted">Car Racer [reboot]</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/DiggerBall">Digger Ball</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/DiggerChan">Digger Chan</a></td>
</tr>
</table>
</td>
<td>&nbsp;</td>
<td>
<table width="100%" border="1">
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/FairyForest">Fairy Forest</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/Jetpac">Jetpac</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/KunKunAndKokoKun">KunKun & KokoKun</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/MegaMan2">Mega Man 2</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/03-Codes/Minesweeper">Minesweeper</a></td>
</tr>
</table>
</td>
</tr>
</table>
<!--<br />-->
IMPORTANT<br />
For all examples: Launch Emulicious separately first.  In VS Code press F5 to debug step through Z80 code!
<br /><br />
<u>Commercial Games</u><br />
Now let us enhance this process to disassemble some commercial games built for the <a href="https://en.wikipedia.org/wiki/Master_System">Sega Master System</a>.  This way, we may gain insight into the early development process plus be able to hack original source code!
<br /><br />
<b>Transbot</b><br />
Create C:\Transbot or ~/Transbot folder.  Copy <b><a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Transbot/.vscode">.vscode</a></b> folder from above with <a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Transbot/.vscode/launch.json">launch.json</a> and <a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Transbot/.vscode/tasks.json">tasks.json</a> files.  Copy <a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Transbot/build.bat">build.bat</a> + <a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Transbot/build.sh">build.sh</a> too.  Don't forget to grant execute permission chmod +x build.sh command.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhyr8CRwoFJlRd1XEgFhH5EdvPo9VP1dNZsJFGbhCw7lhfouOkmxxnU_jLO1xwhKxQ1-PNZx6hb1imgwxxkAK5jA96Oy6Kjuj3OWQHt2EsV4w26dLD1pZJJYArSEHoPjAedmW9-H2166R4/s620/Transbot.jpg"><img alt="" border="0" width="98%" data-original-height="412" data-original-width="620" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhyr8CRwoFJlRd1XEgFhH5EdvPo9VP1dNZsJFGbhCw7lhfouOkmxxnU_jLO1xwhKxQ1-PNZx6hb1imgwxxkAK5jA96Oy6Kjuj3OWQHt2EsV4w26dLD1pZJJYArSEHoPjAedmW9-H2166R4/s600/Transbot.jpg"/></a>
<br />
Download Transbot <a href="https://wowroms.com/en/roms/sega-master-system/transbot-europe/58090.html">ROM</a>.  Launch Emulicious | Open ROM.  Tools menu | Debugger | press Ctrl + A to select all disassembled code.  Save as Transbot.asm.  Update all ".incbin ..." statements using the following utility:
<br /><br />
<i>Utility</i><br />
Download Binary-File-Write <a href="https://github.com/SteveProXNA/Z80code/tree/main/05-Utils/BinaryFileWrite">utility</a>.  Copy both <a href="https://github.com/SteveProXNA/Z80code/blob/main/05-Utils/BinaryFileWrite/input/TransBot.asm">TransBot.asm</a> and <a href="https://github.com/SteveProXNA/Z80code/blob/main/05-Utils/BinaryFileWrite/input/TransBot.sms">TransBot.sms</a> files to <a href="https://github.com/SteveProXNA/Z80code/tree/main/05-Utils/BinaryFileWrite/input">input</a> folder.  Update the config file | set key="fileName" value to "Transbot".  Run BinaryFileWrite.exe.  Copy output to <a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Transbot">Transbot</a> folder.
<br /><br />
Launch VS Code.  Open Transbot folder.  All prior ".incbin..." statements should now refer to binary <a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Transbot/data">data</a> files.  Press Ctrl + Shift + B to execute build script => compile, link and run!  Repeat process for all these projects:
<br />
<table width="100%" border="0">
<tr>
<td>
<table width="100%" border="1">
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/AfterBurner">After Burner</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/AlienSyndrome">Alien Syndrome</a></td>
</tr>
<tr>
<td valign="top">&nbsp;SG-1000 / SC-3000</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/CongoBongo">Congo Bongo</a></td>
</tr>
<tr>
<td valign="top">&nbsp;SG-1000 / SC-3000</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Flicky">Flicky</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/GoldenAxe">Golden Axe</a></td>
</tr>
</table>
</td>
<td>&nbsp;</td>
<td>
<table width="100%" border="1">
<tr>
<td valign="top">&nbsp;SG-1000 / SC-3000</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/MonacoGP">Monaco GP</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/OutRun">Out Run</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Shinobi">Shinobi</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Transbot">Transbot</a></td>
</tr>
<tr>
<td valign="top">&nbsp;Sega Master System</td>
<td valign="top">&nbsp;<a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/WonderBoy">Wonder Boy</a></td>
</tr>
</table>
</td>
</tr>
</table>
<!--<br />-->
IMPORTANT<br />
For all examples: Launch Emulicious separately first.  In VS Code press F5 to debug step through Z80 code!
<br /><br />
<b>Flicky</b><br />
Create C:\Flicky or ~/Flicky folder.  Repeat entire process for Transbot as above but with Flicky.sg <a href="https://www.emurom.net/us/emulation/sega-sg-1000-roms/detail-10372-flicky.html">ROM</a>.  Copy the <b><a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Flicky/.vscode">.vscode</a></b> folder with <a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Flicky/.vscode/launch.json">launch.json</a> and <a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Flicky/.vscode/tasks.json">tasks.json</a> files plus <a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Flicky/build.bat">build.bat</a> + <a href="https://github.com/SteveProXNA/Z80code/tree/main/04-Games/Flicky/build.sh">build.sh</a>.  Retreive <a href="https://github.com/SteveProXNA/Z80code/blob/main/04-Games/Flicky/main.asm">main.asm</a> + <a href="https://github.com/SteveProXNA/Z80code/blob/main/04-Games/Flicky/data">data</a> folder from <a href="https://github.com/SteveProXNA/Z80code/tree/main/05-Utils/BinaryFileWrite">utility</a>.  Press Ctrl + Shift + B to execute build script + press F5 to debug step through Z80 code!
<br /><br />
<i>Hack</i><br />
Use this new setup to hack the original source code!  For example, in Flicky you always start at level #1.  Wouudn't it be cool to start at any level?  Also, wouldn't it be cool to have infinite lives?  Let's check it out!
<br /><br />
Start level and lives count default values are hardcoded in ROM and loaded into RAM.  After debug stepping through Flicky source code we find a piece of code that loads 20x bytes of ROM into RAM on game start:
<br /><br />
Bytes $02C3 and $02C4 default to $01; could either of these be start level #1?  Byte $02CA defaults to $02; could this be lives left?  The corresponding data is loaded in RAM at $C0E7, $C0E8 and $C0EE respectively.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhlD0_qxSa_yVE9_ZfefjDiZhqd9BsuCobt9jPxk5RN9Q1IHv0YhLzM5pR-WskfCv4kB6Vw7e0pBC5VOAYQhBbYR7AkpN5tyXXWQwNhyUMJHnpqf-OYCGW37BKwgnI8gMGxonmlQGvjqRU/s897/FlickySource.jpg"><img alt="" border="0" width="98%" data-original-height="733" data-original-width="897" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhlD0_qxSa_yVE9_ZfefjDiZhqd9BsuCobt9jPxk5RN9Q1IHv0YhLzM5pR-WskfCv4kB6Vw7e0pBC5VOAYQhBbYR7AkpN5tyXXWQwNhyUMJHnpqf-OYCGW37BKwgnI8gMGxonmlQGvjqRU/s600/FlickySource.jpg"/></a>
<br />
<!--
<pre class="csharp" name="code">
_LABEL_2AE_:
		xor a
		ld (_RAM_C0E1_), a
		ld hl, _DATA_2C3_
		ld de, _RAM_C0E7_
		ld bc, $0014
		ldir
		call _LABEL_207B_
		jp _LABEL_2D7_
	
; Data from 2C3 to 2CA (8 bytes)	
_DATA_2C3_:	
	.db $01 $01 $00 $00 $0C $80 $00 $02
	
; Data from 2CB to 2D6 (12 bytes)	
_DATA_2CB_:	
	.dsb 12, $00
</pre>
-->
<br />
Launch Emulicious.  Tools menu | Memory Editor | RAM.  Right click $C0E7 | Toggle Watchpoint.  Repeat for $C0E8 and $C0EE.  Resume code.  Play game and die!  The value at RAM $C0EE decreases from $02 to $01.
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3T95CjYZXzncHWiAWNlNeJ56sGTVfCzYxpVmdYgMbwE10yBQ4spunmPZVnCjENpSzlMsPMWq4AS5rkLX-xNeNNv0LId1ZJVepB7flrCQMYMBiyFtKAQgO2HwH3_thMlsBQJape0TLTbk/s898/FlickyDebug.jpg"><img alt="" border="0" width="98%" data-original-height="675" data-original-width="898" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3T95CjYZXzncHWiAWNlNeJ56sGTVfCzYxpVmdYgMbwE10yBQ4spunmPZVnCjENpSzlMsPMWq4AS5rkLX-xNeNNv0LId1ZJVepB7flrCQMYMBiyFtKAQgO2HwH3_thMlsBQJape0TLTbk/s600/FlickyDebug.jpg"/></a>
<br />
<br />
Therefore, RAM $C0EE stores the lives count loaded from ROM $02CA!  Replace the original $02 with $FF for "infinite" lives.  Repeat process: complete level; see RAM $C0E8 stores start level loaded from ROM $02C4!
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjBTHHPKcnbxDyyg2eTcYsjzbIaNE7CLKyEw2qIO00gOvGa7iZfUocdyIZlWiw82nW9o1rVfFCDqkvNAmXHi2NFbevkkMjOxlrhg2w1QbJbmFJDInj4FUrHkCTR7KlwgromFQ3c-qn8zGc/s635/FlickyHack.jpg"><img alt="" border="0" width="98%" data-original-height="411" data-original-width="635" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjBTHHPKcnbxDyyg2eTcYsjzbIaNE7CLKyEw2qIO00gOvGa7iZfUocdyIZlWiw82nW9o1rVfFCDqkvNAmXHi2NFbevkkMjOxlrhg2w1QbJbmFJDInj4FUrHkCTR7KlwgromFQ3c-qn8zGc/s600/FlickyHack.jpg"/></a>
<br /> <br /> 
<u>Summary</u><br />
Now that we have a productive <a href="https://en.wikipedia.org/wiki/Zilog_Z80">Z80</a> assembler development environment and analyzed some larger projects to better understand the development process we are in a great spot to build our own projects from scratch.
<br /><br />
For completeness, we would still like to better understand relationship between <a href="https://en.wikipedia.org/wiki/Master_System">Sega Master System</a> source code written in C using the <a href="https://github.com/sverx/devkitSMS">devkitSMS</a> and connect the underlying Z80 assembly code generated accordingly.  This will be the topic of the next <a href="https://steveproxna.blogspot.com/2021/04/z80-programming-sample-ii.html">post</a>.
</span>