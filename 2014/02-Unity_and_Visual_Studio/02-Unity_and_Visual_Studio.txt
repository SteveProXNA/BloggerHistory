<span style="font-family:verdana;font-size:85%;">
Now that XNA is officially <a href="http://steveproxna.blogspot.co.uk/2013/02/xna-is-dead.html">dead</a>, many independent game developers have explored various alternatives.  <a href="https://unity3d.com">Unity3D</a> is one popular replacement: especially as game developers are able to leverage their C# skills.
<br /><br />
However, Unity3D uses Mono Develop as default <a href="http://en.wikipedia.org/wiki/Integrated_development_environment">IDE</a> whereas XNA developers are accustomed to using Visual Studio.  Fortunately, there is a plugin for Unity that integrates with Visual Studio directly: <a href="http://unityvs.com">UnityVS</a>.
<br /><br />
Let's check it out!
<br /><br />
<u>Licence</u>
<br />
Navigate to <a href="http://unityvs.com">UnityVS</a>.  Click <b>Try UnityVS</b> button to get the 14x day trial licence.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEitSYKHQpe2IYrnvobTc8rvr4ywD_mz1Fveo9nj75O53iJmAK_2rOuOrVscyBs5Fp_UEOn0F5f38pWSqYZUcJa06iME72N7l6a91xrLPUK0eZBVNSkt1y8Ybr8_zQik0PjAwk6s97lDUuE/s1600/01-UnityVS.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEitSYKHQpe2IYrnvobTc8rvr4ywD_mz1Fveo9nj75O53iJmAK_2rOuOrVscyBs5Fp_UEOn0F5f38pWSqYZUcJa06iME72N7l6a91xrLPUK0eZBVNSkt1y8Ybr8_zQik0PjAwk6s97lDUuE/s640/01-UnityVS.jpg" width="98%" /></a>
<br />
Enter your first name, last name email address and Submit.
<br />
Afterwards, you will receive 2x auto-generated emails:
<table width="100%">
<tr><td valign="top">
<ol>
<li>Open the first email and download the zipped attachment: this is the UnityVS licence</li>
<li>Open the second email which will have the credentials required to download UnityVS</li>
</ol>
</td>
</tr>
</table>
<u>Download</u>
<br />
Navigate to <a href="https://app.unityvs.com">UnityVS</a>.  Sign in using the credentials from the second email.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjy5xCLy8JtfDYDFM3wbwheXcE2TOh7aJcQ3tCxqktfwMVJxHMX_0oPu2sdQOELn3PCvVeSSw3qWY3ZJOFV7kFGL0zbQix4867ePQW8TspVZhz-KE0JMC89m2LZzoz-eTrDJZPnaHtLhMc/s1600/02-UnityVS.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjy5xCLy8JtfDYDFM3wbwheXcE2TOh7aJcQ3tCxqktfwMVJxHMX_0oPu2sdQOELn3PCvVeSSw3qWY3ZJOFV7kFGL0zbQix4867ePQW8TspVZhz-KE0JMC89m2LZzoz-eTrDJZPnaHtLhMc/s640/02-UnityVS.jpg" width="98%" /></a>
<br />
Choose the version of UnityVS you want to download, e.g.: <b>UnityVS 2012</b>.
<br />
Double click the downloaded MSI package as per the <a href="http://unityvs.com/documentation/installation">installation</a> notes.
<br /><br />
<u>Configuration</u>
<br />
Create simple project for Unity and Visual Studio <a href="http://unityvs.com/documentation/configuration">configuration</a> using UnityVS plugin:
<br />
Launch Unity3D.  Create New Project.  Check UnityVS 2012.unitypackage option.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhiKwmJHOXou7iYLhpuA5Qxyn6e9zqT971338e_sigY7fAnLTcusXFV5hXICd4V0B31cBEKz5LQtxshv6CUfN8B3kRvkEFHPlTGyG8uyORpQ03ohifnomVJ7GHrS4GPCIthv0J6u8dorus/s1600/03-CreateProject.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhiKwmJHOXou7iYLhpuA5Qxyn6e9zqT971338e_sigY7fAnLTcusXFV5hXICd4V0B31cBEKz5LQtxshv6CUfN8B3kRvkEFHPlTGyG8uyORpQ03ohifnomVJ7GHrS4GPCIthv0J6u8dorus/s640/03-CreateProject.jpg" width="98%" /></a>
<br />
Alternatively, Open Project.  Choose Assets menu, Import Package, UnityVS 2012.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEidqyKKOLjZcAVUMaSScfsKRS-jwuqAleIU_tNCkLVAeka6hKglIxQrH-I8rESeVgsgY72CMxPpLLIMDOcwydDLnWaPn_v4nzNhbtVjJs5TRKGlyCbtXGuG2Q3DqPa3QLa663nNtB7A6WM/s1600/04-ExistingProject.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEidqyKKOLjZcAVUMaSScfsKRS-jwuqAleIU_tNCkLVAeka6hKglIxQrH-I8rESeVgsgY72CMxPpLLIMDOcwydDLnWaPn_v4nzNhbtVjJs5TRKGlyCbtXGuG2Q3DqPa3QLa663nNtB7A6WM/s640/04-ExistingProject.jpg" width="98%" /></a>
<br />
There should now be the new <b>UnityVS</b> menu available in Unity.
<br />
Note: if there isn't then close Unity and re-open accordingly.
<br /><br />
Next, open UnityVS from Unity: choose UnityVS menu, Open in UnityVS.
<br />
You will be prompted to enter the licence from the first email received.
<br /><br />
<u>Debugging</u>
<br />
Create simple C# script for Unity and Visual Studio <a href="http://unityvs.com/documentation/debugging">debugging</a> using UnityVS plugin.
<br />
Launch Unity3D. Create cube game object and C# script.  Drag script file onto cube.
<br /><br />
Double click the C# script from Unity to open the file in Visual Studio accordingly.
<br />
Check out icon bottom right in Visual Studio: this now connects UnityVS instances.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjm2YlNsOJCHiovIlfdtTSNYQ_-Mq_VJaXrMKAWVSJZkP_hrMN-AkghkZuOS3giw_ZDifT1UW-bccQY4Q1OOeLtU8ZddFJ4mR1uihrR9WTfxgA17QGCEDAFYxlZKyutvfk9XRuxuf3UY_k/s1600/05-UnityInstance.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjm2YlNsOJCHiovIlfdtTSNYQ_-Mq_VJaXrMKAWVSJZkP_hrMN-AkghkZuOS3giw_ZDifT1UW-bccQY4Q1OOeLtU8ZddFJ4mR1uihrR9WTfxgA17QGCEDAFYxlZKyutvfk9XRuxuf3UY_k/s640/05-UnityInstance.jpg" width="98%" /></a>
<br />
Debug the script: insert break point in the Update() method.  Press F5 to launch.
<br />
Click (only) Unity instance.  In Unity, press play and code now breaks to debug.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgYLFaob41SmbYgpJSFonZybsuz6PPL6tm44blgnB8-wA9BKFHGThORgJPg8jMQfSDnDFiPPA2g0MRfNQgUX0pi1d70CzzJdTMumbhaN3iDhkZfgZb2rHBfMdZTFpWxaN2pMcECO0r-CRA/s1600/06-Debugging.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgYLFaob41SmbYgpJSFonZybsuz6PPL6tm44blgnB8-wA9BKFHGThORgJPg8jMQfSDnDFiPPA2g0MRfNQgUX0pi1d70CzzJdTMumbhaN3iDhkZfgZb2rHBfMdZTFpWxaN2pMcECO0r-CRA/s640/06-Debugging.jpg" width="98%" width="98%" /></a>
<br />
<u>Player Debugging</u>
<br />
Extend simple C# script for Unity and Visual Studio <a href="http://unityvs.com/documentation/player-debugging">player debugging</a> using UnityVS plugin.
<br />
Player debugging seems to be more flexible, there are 3x scenarios on how it can be used:
<br /><br />
In Unity, choose File menu, Build Settings, PC, Mac & Linux platform.
<br />
Check both Development Build and Script Debugging check boxes.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj2HGUC7f227rWWEp6IhEG76O-kF5IdLIVTHmtn1obOBqkhdRzDBae-IkrOLefBTKVxBzTIMpFQJoOY0qYCB2xOwjOfWtG8BuG7QMO3q6leiwkdmdpAkpnM9CU6idCA6cmDPl6_FDJHyHM/s1600/07-BuildSettings.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj2HGUC7f227rWWEp6IhEG76O-kF5IdLIVTHmtn1obOBqkhdRzDBae-IkrOLefBTKVxBzTIMpFQJoOY0qYCB2xOwjOfWtG8BuG7QMO3q6leiwkdmdpAkpnM9CU6idCA6cmDPl6_FDJHyHM/s640/07-BuildSettings.jpg" /></a>
<br />
<b>Scenario #1</b>
<br />
In Visual Studio, insert break point.  Choose Debug menu, Attach Unity Debugger.
<br />
In Unity, click Build and Run button and choose file to save (replace if necessary)
<br /><br />
In Visual Studio, select the (new) Unity Instance: WindowsPlayer.
<br />
Click the Windows Player <b>Play!</b> button.  Code now breaks to debug.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgYLFaob41SmbYgpJSFonZybsuz6PPL6tm44blgnB8-wA9BKFHGThORgJPg8jMQfSDnDFiPPA2g0MRfNQgUX0pi1d70CzzJdTMumbhaN3iDhkZfgZb2rHBfMdZTFpWxaN2pMcECO0r-CRA/s1600/06-Debugging.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgYLFaob41SmbYgpJSFonZybsuz6PPL6tm44blgnB8-wA9BKFHGThORgJPg8jMQfSDnDFiPPA2g0MRfNQgUX0pi1d70CzzJdTMumbhaN3iDhkZfgZb2rHBfMdZTFpWxaN2pMcECO0r-CRA/s640/06-Debugging.jpg" width="98%" width="98%" /></a>
<br />
Note: if this doesn't break then click <b>Play!</b> button before Unity Instance: WindowsPlayer.
<br /><br />
<b>Scenario #2</b>
<br />
In Visual Studio, insert break point.  Choose Debug menu, Attach Unity Debugger.
<br />
Back in Unity, choose File menu, Build & Run.  Then the Windows Player launches. 
<br /><br />
In Visual Studio, select the (new) Unity Instance: WindowsPlayer.
<br />
Click the Windows Player <b>Play!</b> button.  Code now breaks to debug.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgYLFaob41SmbYgpJSFonZybsuz6PPL6tm44blgnB8-wA9BKFHGThORgJPg8jMQfSDnDFiPPA2g0MRfNQgUX0pi1d70CzzJdTMumbhaN3iDhkZfgZb2rHBfMdZTFpWxaN2pMcECO0r-CRA/s1600/06-Debugging.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgYLFaob41SmbYgpJSFonZybsuz6PPL6tm44blgnB8-wA9BKFHGThORgJPg8jMQfSDnDFiPPA2g0MRfNQgUX0pi1d70CzzJdTMumbhaN3iDhkZfgZb2rHBfMdZTFpWxaN2pMcECO0r-CRA/s640/06-Debugging.jpg" width="98%" width="98%" /></a>
<br />
Note: this method <i>always</i> seems to work whereas Scenario #1 seems more volatile.
<br /><br />
<b>Scenario #3</b>
<br />
In Visual Studio, insert break point.  Choose Debug menu, Attach Unity Debugger.
<br />
In Windows Explorer, navigate to the saved executable file.  Double click the EXE.
<br /><br />
In Visual Studio, select the (new) Unity Instance: WindowsPlayer.
<br />
Click the Windows Player <b>Play!</b> button.  Code now breaks to debug.
<br />
<a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgYLFaob41SmbYgpJSFonZybsuz6PPL6tm44blgnB8-wA9BKFHGThORgJPg8jMQfSDnDFiPPA2g0MRfNQgUX0pi1d70CzzJdTMumbhaN3iDhkZfgZb2rHBfMdZTFpWxaN2pMcECO0r-CRA/s1600/06-Debugging.jpg" imageanchor="1" ><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgYLFaob41SmbYgpJSFonZybsuz6PPL6tm44blgnB8-wA9BKFHGThORgJPg8jMQfSDnDFiPPA2g0MRfNQgUX0pi1d70CzzJdTMumbhaN3iDhkZfgZb2rHBfMdZTFpWxaN2pMcECO0r-CRA/s640/06-Debugging.jpg" width="98%" width="98%" /></a>
<br />
Note: this method <i>always</i> seems to work whereas Scenario #1 seems more volatile.
<br /><br />
Important: with Player Debugging, it is not necessary to Press F5 in Visual Studio.
<br />
Also, with these scenarios it's not possible to Attach to Process from Visual Studio.
<br /><br />
<u>Scripting</u>
<br />
Finally, many developers who use Visual Studio also integrate ReSharper for keyboard shortcuts.
<br />
UnityVS provides similar built-in keyboard shortcuts, especially for Script <a href="http://unityvs.com/documentation/wizards">wizards</a> and <a href="http://unityvs.com/documentation/navigation">navigation</a>.
<br /><br />
<u>Summary</u>
<br />
<a href="http://unityvs.com">UnityVS</a> is a useful plugin that enables debugging of Unity C# script, code navigation and IntelliSense, all within Visual Studio.  As <a href="https://unity3d.com">Unity3D</a> gains popularity, this affordable plugin may also gain equal popularity!
</span>